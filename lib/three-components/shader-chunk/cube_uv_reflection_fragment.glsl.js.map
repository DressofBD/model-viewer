{"version":3,"file":"cube_uv_reflection_fragment.glsl.js","sourceRoot":"","sources":["../../../src/three-components/shader-chunk/cube_uv_reflection_fragment.glsl.js"],"names":[],"mappings":"AAAA,OAAO,EAAC,YAAY,EAAE,UAAU,EAAC,MAAM,kBAAkB,CAAC;AAE1D,MAAM,CAAC,MAAM,WAAW,GAAG,UAAU,CAAC;;;;;;EAMpC,YAAY;EACZ,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyDX,CAAC","sourcesContent":["import {getFaceChunk, getUVChunk} from './common.glsl.js';\n\nexport const cubeUVChunk = /* glsl */ `\n#ifdef ENVMAP_TYPE_CUBE_UV\n\n#define cubeUV_faceSize (256.0)\n#define cubeUV_maxMipLevel (8.0)\n\n${getFaceChunk}\n${getUVChunk}\n\nfloat defaultMipmap(vec3 direction) {\n  direction *= 0.5 * cubeUV_faceSize;\n  vec3 dx = dFdx(direction);\n  vec3 dy = dFdy(direction);\n  float deltaMax2 = max(dot(dx, dx), dot(dy, dy));\n  return 0.5 * log2(deltaMax2);\n}\n\nvec3 bilinearCubeUV(sampler2D envMap, vec3 direction, float mipInt) {\n  int face = getFace(direction);\n  float faceSize = exp2(mipInt);\n  vec2 texelSize =\n    1.0 / vec2(3.0 * (cubeUV_faceSize + 2.0), \n               4.0 * (cubeUV_maxMipLevel + cubeUV_faceSize) - 2.0);\n\n  vec2 uv = getUV(direction, face) * faceSize;\n  uv += 0.5;\n  vec2 f = fract(uv);\n  uv += 0.5 - f;\n  if (face > 2) {\n    uv.y += faceSize + 2.0;\n    face -= 3;\n  }\n  uv.x += float(face) * (faceSize + 2.0);\n  uv.y += 4.0 * mipInt + 2.0 * (faceSize - 1.0);\n  uv *= texelSize;\n  uv.y = 1.0 - uv.y;\n\n  vec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.x += texelSize.x;\n  vec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.y -= texelSize.y;\n  vec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.x -= texelSize.x;\n  vec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  vec3 tm = mix(tl, tr, f.x);\n  vec3 bm = mix(bl, br, f.x);\n  return mix(tm, bm, f.y);\n}\n\nvec4 textureCubeUV(sampler2D envMap, vec3 reflectedDirection, float mipLevel) {\n  float mip = max(mipLevel, defaultMipmap(reflectedDirection));\n  mip = clamp(cubeUV_maxMipLevel - mip, 0.0, cubeUV_maxMipLevel);\n  float f = fract(mip);\n  float mipInt = floor(mip);\n\n  vec3 color0 = bilinearCubeUV(envMap, reflectedDirection, mipInt);\n  if (f == 0.0) {\n    return vec4(color0, 1.0);\n  } else {\n    vec3 color1 = bilinearCubeUV(envMap, reflectedDirection, mipInt + 1.0);\n    return vec4(mix(color0, color1, f), 1.0);\n  }\n}\n#endif\n`;\n"]}